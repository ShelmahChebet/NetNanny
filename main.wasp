// app NetNanny {
//   wasp: {
//     version: "^0.16.2"
//   },
//   title: "NetNanny"
// }

// route RootRoute { path: "/", to: Home }
// page Home {
//   // We specify that the React implementation of the page is exported from
//   // `src/Home.tsx`. This statement uses standard JS import syntax.
//   // Use `@src` to reference files inside the `src` folder.
//   component: import { Home } from "@src/comoponents/home"
// }
app NetNanny {
  wasp: {
    version: "^0.16.2"
  },
  title: "NetNanny",
  auth: {
    // Tells Wasp which entity to use for storing users.
    userEntity: User,
    methods: {
      // Enable username and password auth.
      usernameAndPassword: {}
    },
    // We'll see how this is used in a bit.
    onAuthFailedRedirectTo: "/login"
  }
  
}

route RootRoute { path: "/", to: MainPage }
page MainPage {
  authRequired: true,
  component: import { MainPage } from "@src/MainPage"
}

route MonitoringRoute { path: "/Monitoring", to: MonitoringPage }
page MonitoringPage {
  component: import { MonitoringPanel } from "@src/components/dashboard/MonitoringPanel"
}

route CaseRoute { path: "/cases", to: CasePage }
page CasePage {
  component: import { CaseList } from "@src/components/dashboard/CaseList"
}

query getMessages {
  // Specifies where the implementation for the query function is.
  // The path `@src/queries` resolves to `src/queries.ts`.
  // No need to specify an extension.
  fn: import { getMessages } from "@src/queries",
  // Tell Wasp that this query reads from the `Task` entity. Wasp will
  // automatically update the results of this query when tasks are modified.
  entities: [Message]
}


api handleData {
  fn: import { handleData } from "@src/apis",
  httpRoute: (POST, "/data/api")
}


// middleware to enable CORS
apiNamespace process {
  middlewareConfigFn: import { processApiMiddleware } from "@src/apis",
  path: "/data/api"
}